{"version":3,"sources":["components/loader.js","App.js","serviceWorker.js","index.js"],"names":["LottieControl","props","state","isStopped","isPaused","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","Fragment","options","height","width","this","React","Component","App","useAxios","data","loading","error","LinesList","lines","map","line","index","key","className","CSSTransition","in","classNames","appear","timeout","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uOAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,WAAW,EAAOC,UAAU,GAF1B,E,qDAMjB,IAAMC,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,mBAIzB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CACEC,QAASP,EACTQ,OAAQ,IACRC,MAAO,IACPX,UAAWY,KAAKb,MAAMC,UACtBC,SAAUW,KAAKb,MAAME,gB,GAvBYY,IAAMC,W,iBC4BlCC,MA3Bf,WAAgB,IAAD,EACsBC,YAAS,+BAD/B,sBACJC,EADI,EACJA,KAAMC,EADF,EACEA,QAASC,EADX,EACWA,MACxB,GAAID,EAAS,OAAO,kBAAC,EAAD,MACpB,GAAIC,EAAO,OAAO,qCAElB,SAASC,EAAUtB,GAKjB,OAJaA,EAAMmB,KACI,GAAGI,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAClC,uBAAGC,IAAKD,GAAQD,MAKpB,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAeC,IAAI,EAAMC,WAAW,OAAOC,QAAQ,EAAMC,QAAS,KAChE,6BACE,4BAAKd,EAAKe,OACR,kBAACZ,EAAD,CAAWH,KAAMA,SCZXgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.d908c814.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../ModernPictogramsForLottie_UsePencil.json\";\r\n\r\nexport default class LottieControl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isStopped: false, isPaused: false };\r\n  }\r\n\r\n  render() {\r\n    const defaultOptions = {\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: animationData,\r\n      rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\",\r\n      },\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Lottie\r\n          options={defaultOptions}\r\n          height={400}\r\n          width={400}\r\n          isStopped={this.state.isStopped}\r\n          isPaused={this.state.isPaused}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Loader from \"./components/loader\";\nimport useAxios from \"axios-hooks\";\nimport { CSSTransition } from \"react-transition-group\";\nfunction App() {\n  const [{ data, loading, error }] = useAxios(\"https://poetrydb.org/random\");\n  if (loading) return <Loader />;\n  if (error) return <p>Error!</p>;\n\n  function LinesList(props) {\n    const data = props.data;\n    const textLines = data[0].lines.map((line, index) => (\n      <p key={index}>{line}</p>\n    ));\n    return textLines;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CSSTransition in={true} classNames=\"fade\" appear={true} timeout={600}>\n          <div>\n            <h1>{data.title}</h1>\n              <LinesList data={data} />\n          </div>\n        </CSSTransition>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}